package common

import (
	"fmt"
	go_flags "github.com/jessevdk/go-flags"
	"io/ioutil"
)

type FleetConfig struct {
	ConfPath string `long:"fleet_conf" description:"fleet conf path (default /etc/fleet/fleet.conf)"`
}

func (c *FleetConfig) load(argsin []string) ([]string, error) {
	// Set some defaults
	c.ConfPath = "/etc/fleet/fleet.conf"

	// override defaults, incoming conf, env vars with command line arguments
	argsout, err := go_flags.NewParser(c, go_flags.IgnoreUnknown).ParseArgs(argsin)

	return argsout, err
}

func NewFleetConfig(argsin []string) (*FleetConfig, []string, error) {
	c := new(FleetConfig)
	argsout, err := c.load(argsin)
	return c, argsout, err
}

func (cfg *FleetConfig) WriteFile(etcd *EtcdConfig) {

	// wrap each peer in quotes
	conf := fmt.Sprintf(
		`
#
# Generated by ScriptRock Config init
#
public_ip = "%s"

`,
		etcd.ClientAddr) // public_ip

	fmt.Printf("Writing fleet conf file to '%s'\n", cfg.ConfPath)
	if err := ioutil.WriteFile(cfg.ConfPath, []byte(conf), 0644); err != nil {
		fmt.Printf("Could not write conf file '%s': %s\n", cfg.ConfPath, err.Error())
	}
}
